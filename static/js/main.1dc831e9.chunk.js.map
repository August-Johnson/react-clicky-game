{"version":3,"sources":["components/Navbar/Navbar.js","components/Header/Header.js","components/Container.js","components/Row.js","components/Card/Card.js","components/Game/Game.js","App.js","index.js"],"names":["Navbar","props","react_default","a","createElement","className","style","color","messageColor","message","score","highscore","Header","Container","children","Row","Card","clicked","backgroundImage","concat","image","onClick","handleClick","card","Game","state","originalArray","gameCards","temporaryArray","shuffleCards","tempCardValue","randomCard","tempArr","_this","currentIndex","length","Math","floor","random","setState","handleCorrectGuess","handleLoseCondition","resetGame","handleWinCondition","resetArray","forEach","highscoreCheck","this","_this2","components_Navbar_Navbar","components_Header_Header","components_Container","components_Row","map","components_Card_Card","key","id","Component","App","components_Game_Game","ReactDOM","render","src_App","document","getElementById"],"mappings":"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","file":"static/js/main.1dc831e9.chunk.js","sourcesContent":["import React from 'react';\r\nimport \"./Navbar.css\";\r\n\r\nfunction Navbar(props) {\r\n    return (\r\n        <nav className=\"navbar navbar-expand-lg navbar-dark text-white fixed-top\">\r\n            <div className=\"col-0 col-sm-0 col-md-1 col-lg-1 col-xl-1\"></div>\r\n            <div className=\"col-3 col-sm-3\">\r\n                <h1>Clicky Game</h1>\r\n            </div>\r\n            <div className=\"col-4 col-sm-3\">\r\n                {/* Message and its color to display depending on the user's guess, coming in as props*/}\r\n                <h2 style={{ color: props.messageColor }}>{props.message}</h2>\r\n            </div>\r\n            <div className=\"col-4 col-sm-5\">\r\n                {/* Score and highscore values to display, brought in as props */}\r\n                <h3 className=\"score-display\" >Score:{props.score} | Highscore: <span className={(props.highscore > 0 ? \"highscore-display\" : \"\")}>{props.highscore}</span></h3>\r\n            </div>\r\n        </nav>\r\n    );\r\n}\r\n\r\nexport default Navbar;","import React from 'react';\r\nimport \"./Header.css\";\r\n\r\nfunction Header() {\r\n    return (\r\n        <div className=\"clicky-game-header\">\r\n            <h2>Clicky Game!</h2>\r\n            <p>Click on an image to earn points, but don't click on any more than once!</p>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Header;","import React from \"react\";\r\n\r\nfunction Container(props) {\r\n    return <div className=\"container\">{props.children}</div>\r\n}\r\n\r\nexport default Container;","import React from \"react\";\r\n\r\nfunction Row(props) {\r\n    return <div className=\"row\">{props.children}</div>\r\n}\r\n\r\nexport default Row;","import React from 'react';\r\nimport \"./Card.css\";\r\n\r\nfunction Card(props) {\r\n    return (\r\n        <div className=\"col-4 col-sm-3 col-md-3 col-lg-3 col-xl-3\" >\r\n            <div className=\"card\" clicked={props.clicked} style={{ backgroundImage: `url(${props.image})` }} onClick={() => props.handleClick(props.card)}>\r\n            </div >\r\n\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Card;\r\n","import React, { Component } from \"react\";\r\nimport Navbar from \"../Navbar/Navbar\";\r\nimport Header from \"../Header/Header\";\r\nimport Container from \"../Container\";\r\nimport Row from \"../Row\";\r\nimport Card from \"../Card/Card\";\r\nimport gameCards from \"../../cards.json\";\r\n\r\nclass Game extends Component {\r\n    // Setting the state of the message and its color, the original array of cards being imported from cards.json, and the score and highscore.\r\n    // Also setting the state for the card array equal to the json being imported.\r\n    state = {\r\n        originalArray: gameCards,\r\n        temporaryArray: gameCards,\r\n        message: \"Click an image to begin!\",\r\n        messageColor: \"#FFFFFF\",\r\n        score: 0,\r\n        highscore: 0\r\n    }\r\n\r\n    // Shuffle the order of the counts on initial load.\r\n    componentDidMount() {\r\n        this.shuffleCards();\r\n    }\r\n\r\n    // Every update (in this case, clicking a card), run the method that determines whether or not to update the highscore.\r\n    componentDidUpdate() {\r\n        this.highscoreCheck();\r\n        this.handleWinCondition();\r\n    }\r\n\r\n    // Method that shuffles the order in which the cards will render.\r\n    // I used the Fisher-Yates Shuffle Algorithm.\r\n    shuffleCards = () => {\r\n\r\n        // setting a variable that holds the value equal to the original source of cards in the state.\r\n        const tempArr = this.state.temporaryArray;\r\n\r\n        // Take the current index starting at the end of the array.\r\n        // Declare 2 variables, one that temporarily holds the value of the current index.\r\n        // And one that represents a random card index that isn't the one being stored.\r\n        let currentIndex = tempArr.length; // (Left the current index number greater than the index position can go by 1 so I don't have to add it to Math.random later)\r\n        let tempCardValue;\r\n        let randomCard;\r\n\r\n        // As long as the current index number is greater than 0.\r\n        while (currentIndex > 0) {\r\n\r\n            // Randomly pick an index number from the card array.\r\n            randomCard = Math.floor(Math.random() * currentIndex);\r\n\r\n            // Decrement the current index number by 1.\r\n            currentIndex -= 1;\r\n\r\n            // Store current card in the temp variable.\r\n            tempCardValue = tempArr[currentIndex];\r\n\r\n            // Swap the current card with the randomly chosen card.\r\n            tempArr[currentIndex] = tempArr[randomCard];\r\n\r\n            // Set the card that was randomly chosen equal to the card we stored earlier. (switch places).\r\n            tempArr[randomCard] = tempCardValue;\r\n        }\r\n        // Setting the state for the randomized array of cards.\r\n        this.setState({ temporaryArray: tempArr });\r\n    }\r\n\r\n\r\n    // Method that handles when a user clicks on a card.\r\n    handleClick = (card) => {\r\n        // If the card hasn't been clicked yet, set the click value to true and run the method for a successful guess.\r\n        if (card.clicked === \"false\") {\r\n            card.clicked = \"true\";\r\n            this.handleCorrectGuess();\r\n        }\r\n        else {\r\n            // If the card has been clicked, run the method for losing the game.\r\n            this.handleLoseCondition();\r\n        }\r\n        // Re-shuffle the card display order.\r\n        this.shuffleCards();\r\n    }\r\n\r\n\r\n    // Method for handling when the user loses by clicking an image they have already clicked.\r\n    handleLoseCondition = () => {\r\n        // Resetting the score back to 0 and displaying the message (in red) alerting them they lost.\r\n        this.setState({\r\n            score: 0,\r\n            message: \"You Guessed Incorrectly!\",\r\n            messageColor: \"#FF0000\"\r\n        });\r\n        this.resetGame();\r\n    }\r\n\r\n\r\n    // Method that handles when the user guesses correctly.\r\n    handleCorrectGuess = () => {\r\n        // Incrementing the score by 1 and displaying a message (in green) to the user telling them they have guessed correctly.\r\n        this.setState({\r\n            score: this.state.score + 1,\r\n            message: \"You Guessed Correctly!\",\r\n            messageColor: \"#32CD32\"\r\n        });\r\n    }\r\n\r\n\r\n    // Method that checks if the user has won. (12 points is the maximum you can acheive) \r\n    // So if the user reaches that score, notify them that they have won and reset the game.\r\n    handleWinCondition = () => {\r\n        if (this.state.score === 12) {\r\n            this.setState({ message: \"You Win! Click an image to play again!\", messageColor: \"#FFFFFF\", score: 0 });\r\n            this.resetGame();\r\n        }\r\n    }\r\n\r\n\r\n    // Method that loops thorugh the temporary array of cards and switches its clicked value back to false if it is true.\r\n    // Sets the state of the original array equal to the array that was looped through.\r\n    resetGame = () => {\r\n        let resetArray = this.state.temporaryArray.forEach((card) => {\r\n            if (card.clicked === \"true\") {\r\n                card.clicked = \"false\";\r\n            }\r\n            return card;\r\n        });\r\n        this.setState({ originalArray: resetArray });\r\n    }\r\n\r\n\r\n    // Method that checks if the user's end score was higher than the current highscore and updates the state accordingly.\r\n    highscoreCheck = () => this.state.score > this.state.highscore ? this.setState({ highscore: this.state.score }) : false\r\n\r\n\r\n    render() {\r\n\r\n        return (\r\n            <div>\r\n                <Navbar message={this.state.message} messageColor={this.state.messageColor} score={this.state.score} highscore={this.state.highscore} />\r\n                <Header />\r\n                <Container>\r\n                    <Row>\r\n                        {/* Passing the card images, card array, and all the necessary methods */}\r\n                        {this.state.temporaryArray.map((card) =>\r\n                            <Card key={card.id} image={card.image} clicked={card.clicked} handleClick={this.handleClick} card={card} />)}\r\n                    </Row>\r\n                </Container>\r\n            </div >\r\n        )\r\n    }\r\n}\r\n\r\nexport default Game;","import React from 'react';\nimport Game from \"./components/Game/Game\";\n\nfunction App() {\n    return <Game />;\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}