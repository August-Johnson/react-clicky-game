{"version":3,"sources":["components/Navbar/Navbar.js","components/Header/Header.js","components/Container.js","components/Row.js","components/Card/Card.js","components/Game/Game.js","App.js","index.js"],"names":["Navbar","props","react_default","a","createElement","className","style","color","messageColor","message","score","highscore","Header","Container","children","Row","Card","clicked","backgroundImage","concat","image","onClick","handleClick","card","Game","state","originalArray","gameCards","shuffleCards","tempCardValue","randomCard","tempArr","_this","currentIndex","length","Math","floor","random","setState","handleCorrectGuess","handleLoseCondition","resetGame","handleWinCondition","resetArray","forEach","push","highscoreCheck","this","_this2","components_Navbar_Navbar","components_Header_Header","components_Container","components_Row","map","components_Card_Card","key","id","Component","App","components_Game_Game","ReactDOM","render","src_App","document","getElementById"],"mappings":"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","file":"static/js/main.c2562d51.chunk.js","sourcesContent":["import React from 'react';\nimport \"./Navbar.css\";\n\nfunction Navbar(props) {\n    return (\n        <nav className=\"navbar navbar-expand-lg navbar-dark text-white fixed-top\">\n            <div className=\"col-0 col-sm-0 col-md-1 col-lg-1 col-xl-1\"></div>\n            <div className=\"col-3 col-sm-3\">\n                <h1>Clicky Game</h1>\n            </div>\n            <div className=\"col-4 col-sm-3\">\n                {/* Message and its color to display depending on the user's guess, coming in as props*/}\n                <h2 style={{ color: props.messageColor }}>{props.message}</h2>\n            </div>\n            <div className=\"col-4 col-sm-5\">\n                {/* Score and highscore values to display, brought in as props */}\n                <h3 className=\"score-display\" >Score:{props.score} | Highscore: <span className={(props.highscore > 0 ? \"highscore-display\" : \"\")}>{props.highscore}</span></h3>\n            </div>\n        </nav>\n    );\n}\n\nexport default Navbar;","import React from 'react';\nimport \"./Header.css\";\n\nfunction Header() {\n    return (\n        <div className=\"clicky-game-header\">\n            <h2>Clicky Game!</h2>\n            <p>Click on an image to earn points, but don't click on any more than once!</p>\n        </div>\n    );\n}\n\nexport default Header;","import React from \"react\";\n\nfunction Container(props) {\n    return <div className=\"container\">{props.children}</div>\n}\n\nexport default Container;","import React from \"react\";\n\nfunction Row(props) {\n    return <div className=\"row\">{props.children}</div>\n}\n\nexport default Row;","import React from 'react';\nimport \"./Card.css\";\n\nfunction Card(props) {\n    return (\n        <div className=\"col-4 col-sm-3 col-md-3 col-lg-3 col-xl-3\" >\n            <div className=\"card\" clicked={props.clicked} style={{ backgroundImage: `url(${props.image})` }} onClick={() => props.handleClick(props.card)}>\n            </div >\n\n        </div>\n    );\n}\n\nexport default Card;\n","import React, { Component } from \"react\";\nimport Navbar from \"../Navbar/Navbar\";\nimport Header from \"../Header/Header\";\nimport Container from \"../Container\";\nimport Row from \"../Row\";\nimport Card from \"../Card/Card\";\nimport gameCards from \"../../cards.json\";\n\nclass Game extends Component {\n    // Setting the state of the message and its color, the original array of cards being imported from cards.json, and the score and highscore.\n    // Also setting the state for the card array equal to the json being imported.\n    state = {\n        originalArray: gameCards,\n        message: \"Click an image to begin!\",\n        messageColor: \"#FFFFFF\",\n        score: 0,\n        highscore: 0\n    }\n\n    // Shuffle the order of the counts on initial load.\n    componentDidMount() {\n        this.shuffleCards();\n    }\n\n    // Every update (in this case, clicking a card), run the method that determines whether or not to update the highscore.\n    componentDidUpdate() {\n        this.highscoreCheck();\n        this.handleWinCondition();\n    }\n\n    // Method that shuffles the order in which the cards will render.\n    // I used the Fisher-Yates Shuffle Algorithm.\n    shuffleCards = () => {\n\n        // setting a variable that holds the value equal to the original source of cards in the state.\n        const tempArr = this.state.originalArray;\n\n        // Take the current index starting at the end of the array.\n        // Declare 2 variables, one that temporarily holds the value of the current index.\n        // And one that represents a random card index that isn't the one being stored.\n        let currentIndex = tempArr.length; // (Left the current index number greater than the index position can go by 1 so I don't have to add it to Math.random later)\n        let tempCardValue;\n        let randomCard;\n\n        // As long as the current index number is greater than 0.\n        while (currentIndex > 0) {\n\n            // Randomly pick an index number from the card array.\n            randomCard = Math.floor(Math.random() * currentIndex);\n\n            // Decrement the current index number by 1.\n            currentIndex -= 1;\n\n            // Store current card in the temp variable.\n            tempCardValue = tempArr[currentIndex];\n\n            // Swap the current card with the randomly chosen card.\n            tempArr[currentIndex] = tempArr[randomCard];\n\n            // Set the card that was randomly chosen equal to the card we stored earlier. (switch places).\n            tempArr[randomCard] = tempCardValue;\n        }\n        // Setting the state of the card array equal to the randomized one.\n        this.setState({ originalArray: tempArr });\n    }\n\n\n    // Method that handles when a user clicks on a card.\n    handleClick = (card) => {\n        // If the card hasn't been clicked yet, set the click value to true and run the method for a successful guess.\n        if (card.clicked === \"false\") {\n            card.clicked = \"true\";\n            this.handleCorrectGuess();\n        }\n        else {\n            // If the card has been clicked, run the method for losing the game.\n            this.handleLoseCondition();\n        }\n        // Re-shuffle the card display order.\n        this.shuffleCards();\n    }\n\n\n    // Method for handling when the user loses by clicking an image they have already clicked.\n    handleLoseCondition = () => {\n        // Resetting the score back to 0 and displaying the message (in red) alerting them they lost.\n        this.setState({\n            score: 0,\n            message: \"You Guessed Incorrectly!\",\n            messageColor: \"#FF0000\"\n        });\n        this.resetGame();\n    }\n\n\n    // Method that handles when the user guesses correctly.\n    handleCorrectGuess = () => {\n        // Incrementing the score by 1 and displaying a message (in green) to the user telling them they have guessed correctly.\n        this.setState({\n            score: this.state.score + 1,\n            message: \"You Guessed Correctly!\",\n            messageColor: \"#32CD32\"\n        });\n    }\n\n\n    // Method that checks if the user has won. (12 points is the maximum you can acheive) \n    // So if the user reaches that score, notify them that they have won and reset the game.\n    handleWinCondition = () => {\n        if (this.state.score === 12) {\n            this.setState({ message: \"You Win! Click an image to play again!\", messageColor: \"#FFFFFF\", score: 0 });\n            this.resetGame();\n        }\n    }\n\n\n    // Method that loops through the array of cards and switches its clicked value back to false if it is true.\n    // Sets the state of the original array equal to the array that was looped through and modified.\n    resetGame = () => {\n        const resetArray = [];\n\n        this.state.originalArray.forEach((card) => {\n            if (card.clicked === \"true\") {\n                card.clicked = \"false\";\n            }\n            resetArray.push(card);\n        });\n        this.setState({ originalArray: resetArray });\n    }\n\n\n    // Method that checks if the user's end score was higher than the current highscore and updates the state accordingly.\n    highscoreCheck = () => this.state.score > this.state.highscore ? this.setState({ highscore: this.state.score }) : false\n\n\n    render() {\n\n        return (\n            <div>\n                <Navbar message={this.state.message} messageColor={this.state.messageColor} score={this.state.score} highscore={this.state.highscore} />\n                <Header />\n                <Container>\n                    <Row>\n                        {/* Passing the card images, card array, and all the necessary methods */}\n                        {this.state.originalArray.map((card) =>\n                            <Card key={card.id} image={card.image} clicked={card.clicked} handleClick={this.handleClick} card={card} />)}\n                    </Row>\n                </Container>\n            </div >\n        )\n    }\n}\n\nexport default Game;","import React from 'react';\nimport Game from \"./components/Game/Game\";\n\nfunction App() {\n    return <Game />;\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}